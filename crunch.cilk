// Kalah minimax search code
// Geoffrey Irving
// 1sep0

#include "crunch.cilkh"

hash* ha = 0;    
endgame* eg = 0; 

int stones = 0; 
int calldepth;
int fulldepth;
stat_t stat;

void init_stat() {
  memset(&stat,0,sizeof(stat_t));
  }

void free_stat() {}
void update_stat() {}

void format_elapsed(char *s, double dt) {
  long t;
  div_t d,h,m;
  if (dt < 60)
    sprintf(s,"%f",dt);
  else {
    t = dt;
    d = div(t,86400);
    h = div(d.rem,3600);
    m = div(h.rem,60);
    if (d.quot)
      s += sprintf(s,"%d days, ",d.quot);
    if (d.quot || h.quot)
      sprintf(s,"%d:%.2d:%.2d",h.quot,m.quot,m.rem);
    else if (m.quot)
      sprintf(s,"%d:%.2d",m.quot,m.rem);
    else
      sprintf(s,"%d",m.rem);
    }
  }

void print_stat(FILE *f, char *p) {
  char t[50];
  update_stat();
  format_elapsed(t,stat.elapsed);
  fprintf(f,"%sThinking time:    %s\n",p,t);
  fprintf(f,"%sMaximum depth:    %d\n",p,stat.maxdepth);
  fprintf(f,"%sNodes searched:   %lld\n",p,stat.nodes);
  fprintf(f,"%sNodes peeked:     %lld\n",p,stat.peeks);
  fprintf(f,"%sBeta cutoffs:     %lld\n",p,stat.cutoffs);
  fprintf(f,"%sHash cutoffs:     %lld\n",p,stat.ha_lookups);
  fprintf(f,"%sFutility cutoffs: %lld\n",p,stat.f_cutoffs);
  fprintf(f,"%sEndgame lookups:  %lld\n",p,stat.eg_lookups);
  fprintf(f,"%sNodes per second: %.0f\n",p,stat.nodes/stat.elapsed);
  }

static inline void smallsort(int n, int *r, c_res **v) {
  register int i,j,tr;
  register c_res *tv;
  for (i=1;i<n;i++)
    if (r[i-1] < r[i]) {
      tr = r[i];
      tv = v[i];
      j = i;
      do {
        r[j] = r[j-1];
        v[j] = v[j-1];
        j--;
        } while (j > 0 && r[j-1] < tr);
      r[j] = tr;
      v[j] = tv;
      }
  } 

/* Handle all O(1) stuff */ 
static int peek(c_res *s, int d, int a) {
  int r,k,t;

  STAT(stat.peeks++);

  /* handle end of game */
  if (s->p.w >= 0) {
    s->rd = 200;
    return rate(s->p);
    }
  
  k = stones - s->p.a[LPIT] - s->p.a[PITS];
 
  /* endgame database */
  if (eg_known(eg,k)) {
    STAT(stat.eg_lookups++);
    r = eg_lookup(eg,k,&s->p,&t);
    if (t == EG_EXACT || r > a) { 
      s->rd = 200; 
      return r;
      }
    }
  
  r = rate(s->p);

  /* futility pruning */
  if (r - k + 2 > a) {
    STAT(stat.f_cutoffs++);
    s->rd = 200;
    return r - k + 2;
    }
  if (r + k <= a) {
    STAT(stat.f_cutoffs++);
    s->rd = 200;
    return r + k;
    }

  /* transposition table */ 
  ha_lookup(ha,&s->da,&s->p);
  if (s->da.t && s->da.d >= d && (s->da.t == DV_LO ? s->da.r > a : s->da.r <= a)) {
    STAT(stat.ha_lookups++);
    s->rd = s->da.d;
    return s->da.r;
    }

  /* evaluate leaf nodes */
  if (!d) {
    s->rd = 0;
    return r;
    }  

  /* failure */
  s->rd = -1;      
  return r;
  }

/* Minimal-window fail-soft jamboree negamax search */
cilk c_res* crunch(c_res* s, int d, int a) {
  int i,r,n,tm,ed,cutoff;

  c_res c[PITS];
  c_res *o[PITS];
  int cr[PITS];

  inlet void absorb(c_res *cs) {
    r = cs->k ? cs->r : -cs->r;
    if (++cs->rd < s->rd)
      s->rd = cs->rd;
    if (s->r < r) {
      s->r = r;
      s->m[0] = cs->o + '0';
      if (cs->k && 0)
        strcpy(s->m+1,cs->m);
      else
        s->m[1] = 0;
      if (s->r > a) {
        STAT(stat.cutoffs++);
        cutoff = 1;
        abort;
        }
      }
    }
    
  STAT(stat.nodes++);
  STAT(if (stat.maxdepth < calldepth - d) stat.maxdepth = calldepth - d);

  /* peek at all children and construct move ordering */
  n = 0;
  d--;
  ed = fulldepth ? 200 : d;
  s->rd = 250;
  s->r = SCHAR_MIN;
  cutoff = 0;
  tm = s->da.t ? s->da.m : -1;
  for (i=PITS-1;i>=0;i--)
    if (bin(s->p,i)) {
      c[i].p = s->p;
      c[i].k = move(&c[i].p,i);
      r = c[i].k ?  peek(c+i,ed,a) : -peek(c+i,ed,-a-1);
      if (++c[i].rd > 0) {    // peek sucessful
        if (c[i].rd < s->rd)
          s->rd = c[i].rd;
        if (s->r < r) {
          s->r = r;
          s->m[0] = i + '0'; 
          s->m[1] = 0;
          if (s->r > a) {
            STAT(stat.cutoffs++);
            cutoff = 1; 
            break;
            }
          }
        }
      else {            // peek failed, rate this move
        o[n] = c+i; 
        c[i].o = i;
       if (i == tm)   
          cr[n] = 1000;
        else if (c[i].k)
          cr[n] = 200 + i; 
        else 
          cr[n] = r;
        n++;
        }
      }

  if (!cutoff && n) {
#ifdef PVM
    c_res *c;
    P_INIT();
#endif
    smallsort(n,cr,o);
  
    /* try first move serially */
#ifndef PVM
    absorb(spawn crunch(o[0], d, o[0]->k ? a : -a-1));
#else
    P_PUSH();
    c = crunch(o[0], d, o[0]->k ? a : -a-1);
    P_CHECK();
    P_POP();
    absorb(c);
#endif
    sync;

    /* search remaining children in parallel */
    for (i=1;i<n;i++) {
      if (cutoff) break;
#ifndef PVM
      absorb(spawn crunch(o[i], d, o[i]->k ? a : -a-1));
#else
      P_PUSH();
      c = crunch(o[0], d, o[i]->k ? a : -a-1);
      P_CHECK();
      P_POP();
      absorb(c);
#endif
      }

    sync;
    }

  /* store search results in transposition table */
  if (s->rd > LOWDEPTH && (!s->da.t || s->rd >= s->da.d)) 
    da_seta(&s->da, s->rd, *s->m-'0', s->r, s->r > a ? DV_LO : DV_HI);

/*  if (d > 397) {
    for (i=200;i>d;i--)
      putchar('*');
    printf(" d %d, s %d, o %d, a %d, r %d, m %s, rd %d, p ",d+1,s->p.s,s->o,a,s->r,s->m,s->rd);   
    write_pq(stdout,s->p);
    }
*/

  return s;
  }

/* Top level minimal-window fail-soft alpha-beta negamax search */
cilk int toplevel(char *m, position *p, int d, int *rd, int a) {
  c_res s;
  c_res *sp;

  STAT(calldepth = d);
  fulldepth = d >= 200 ? 1 : 0;

  /* transposition table check */
  ha_lookup(ha,&s.da,p);
  if (s.da.t && s.da.d >= d &&
         ((s.da.t == DV_LO && s.da.r > a) ||
          (s.da.t == DV_HI && s.da.r <= a))) {
    STAT(stat.ha_lookups++);
    *rd = s.da.d;
    *m = s.da.m + '0';
    m[1] = 0;
    return s.da.r;
    }

  /* proceed with full search */
  s.p = *p;

#ifndef PVM
  sp = spawn crunch(&s,d,a);
  sync;
#else
  parallel(&s,d,a);
#endif

  *rd = s.rd;
  strcpy(m,s.m);
  return s.r; 
  }

cilk int mtdf(char *m, position *p, int d, int *rd, int g, int f) {
  int a, td;
  char cm[MAXMVC];
  Cilk_time start;
  double elapsed;
  int r = g;
  int lo = -1000;
  int hi = 1000;
  *rd = 250;
  m[0] = '?'; 
  m[1] = 0;
  if (f & SF_VERBOSE) 
    printf("MTD(f): d %d, g %d, t %f\n",d,g,stat.elapsed);

  do {
    a = (r == lo) ? r : r-1;
    start = Cilk_get_wall_time();  
    r = spawn toplevel(cm,p,d,&td,a);
    sync;

    if (td < *rd)
      *rd = td;
    if (r > a) {
      lo = r;
      strcpy(m,cm);
      }
    else
      hi = r;
    elapsed = Cilk_wall_time_to_sec(Cilk_get_wall_time() - start);
    stat.elapsed += elapsed;
    if (f & SF_VERBOSE) {
      printf("  %d %d, a %d, d %d, m %s, t %f\n",lo,hi,a,td,cm,elapsed);
      if (f & SF_FLOOD)
        print_stat(stdout,"    ");
      }
    if (f & SF_FULL && f & SF_SINGLE)
      break;
    } while (lo < hi);

  if (f & SF_VERBOSE) putchar('\n');
  return r;
  }

cilk int solve(char *m, position p, int d, int *rd, int g, int f) {
  int i,r,jump;

  /* count total stones */
  stones = 0;
  for (i=0;i<TPITS;i++)
    stones += p.a[i];

  r = (f & SF_GUESS) ? g : rate(p);
  jump = (f & SF_JUMP) ? 0 : JUMPDEPTH;
  if (f & SF_FLOOD) f |= SF_VERBOSE;
  *rd = 0;

  i = d % STEPSIZE + STEPSIZE;
  for (;*rd<d;i+=STEPSIZE) {  
    if (i > jump)
      i = d;
    if (i == d)
      f |= SF_FULL;

    r = spawn mtdf(m,&p,i,rd,r,f);
    sync;

    if (*rd > i) {
      if (*rd > d) break;
      i = *rd - (*rd-d+100*STEPSIZE) % STEPSIZE;
      }
    }

  if (f & SF_STALE) setstale(ha);

  return r;
  }


/* Miscellaneous functions */

void init_hash(int size, char *file) {
  ha = (hash*) malloc(sizeof(hash));
  if (!file || access(file,F_OK))   // hash file doesn't exist
    create_hash(ha,size);
  else {
    FILE *f = fopen(file,"r");
    read_hash(ha,f);
    fclose(f);
    }
  } 

void save_hash(char *file) {
  if (file) {
    FILE *f = fopen(file,"w");
    write_hash(ha,f);
    fclose(f);
    }
  }

void close_hash() {
  free_hash(ha);
  free(ha);
  }

void init_endgame(int size, char *file) {
  if (!access(file,F_OK)) {          // endgame database exists
    FILE *f = fopen(file,"r");
    eg = (endgame*) malloc(sizeof(endgame));
    read_endgame(eg,f,size);
    fclose(f);
    }
  else {
    fprintf(stderr,"Cannot open endgame database\n");
    exit(-1);
    }
  }

void close_endgame() {
  free_endgame(eg);
  free(eg);
  }
